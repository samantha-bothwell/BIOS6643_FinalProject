x2 <- pre_post_test[which(pre_post_test$pre_post=='most recent post'),var]
#make sure no NA's available
x1 <- subset(x1, !is.na(x1))
x2 <- subset(x2, !is.na(x2))
x3a <- pre_post_test[which(pre_post_test$pre_post=='paired pre'),var]
x4a <- pre_post_test[which(pre_post_test$pre_post=='paired post'),var]
#make sure paired data is available for both pre-post
x3 <- subset(x3a, !is.na(x3a) & !is.na(x4a))
x4 <- subset(x4a, !is.na(x3a) & !is.na(x4a))
test <- try(Partover.test(x1, x2, x3, x4))
x<- ifelse(inherits(test, "try-error"), NA, round(test$p.value, 2))
x
}
means_tests<-data.frame(do.call(rbind,lapply(vars_continuous,test_means)),row.names=NULL) #total = total number of individuals in "ppst" group
means_tests$Variable <- vars_continuous
###############################create figures of longitudinal data###############################
#make a longitudinal dataset with only dates
itb_times <- itb_pump
itb_times$date <- as.Date(itb_times$surgery_date, format = "%m/%d/%Y")
itb_times$redcap_repeat_instrument <- itb_times$surgery_reason
itb_times <- itb_times[,c('mrn', 'redcap_repeat_instrument', 'date')]
sleep_times <- sleep_study
sleep_times$psg_study_date <- as.character(sleep_times$psg_study_date)
sleep_times$date <- as.Date(sleep_times$psg_study_date, format = "%m/%d/%Y")
sleep_times$date <- as.factor(sleep_times$date)
sleep_times <- sleep_times[,c('mrn', 'redcap_repeat_instrument', 'date')]
all_times <- rbind(itb_times, sleep_times)
all_times$date <- as.Date(all_times$date)
all_times <- all_times[order(all_times$mrn,all_times$date),]
all_times <- all_times %>% group_by(mrn) %>% mutate(time = date - first(date))
all_times <- all_times[!is.na(all_times$mrn),]
followup <- all_times %>% group_by(mrn)%>%
summarise(
total_time = max(date) - min(date),
check = last(date) - first(date)
)
#followup < followup[order(followup$total_time),]
followup$mrn = factor(followup$mrn, levels=followup$mrn)
colnames(all_times)[2] <- "Visit Reason"
# Remove mrn identifiers
library(BCA)
followup$mrn = as.factor(1:53)
all_times$mrn = as.factor(all_times$mrn)
all_times$mrn = relabel.factor(all_times$mrn, as.factor(1:53), old.labels=levels(all_times$mrn))
#the plot
ggplot(followup, aes(mrn, total_time)) +
geom_bar(stat="identity") +
geom_point(data=all_times,
aes(factor(mrn), time, colour=`Visit Reason`, shape=`Visit Reason`), size=4) +
scale_x_discrete(name = "Participant") +
ylab("Total Time") +
coord_flip()
#Clear existing data and graphics
rm(list=ls())
library(tidyr)
library(dplyr)
library(Hmisc)
library(tableone)
source('Z:/Shared Projects/Shared Breathing Institute Projects/2018.09.28 Mohon intrathecal baclofen pump and Sleep/Code/IntrathecalBaclofenP_R_basic_info.r')
source('Z:/Shared Projects/Shared Breathing Institute Projects/2018.09.28 Mohon intrathecal baclofen pump and Sleep/Code/IntrathecalBaclofenP_R_itb_pump.r')
source('Z:/Shared Projects/Shared Breathing Institute Projects/2018.09.28 Mohon intrathecal baclofen pump and Sleep/Code/IntrathecalBaclofenP_R_sleep_study.r')
# Exclude mrns 399292, 1086070, 1107197, 1057359, 1691128
exclude <- c(399292, 1086070, 1107197, 1057359, 1691128)
basic_info <- basic_info[!(basic_info$mrn %in% exclude),]
itb_pump <- itb_pump[!(itb_pump$mrn %in% exclude),]
sleep_study <- sleep_study[!(sleep_study$mrn %in% exclude),]
# Remove sleep studies
# Remove 1019819 first psg
sleep_study <- sleep_study[!(sleep_study$mrn == 1019819 & sleep_study$redcap_repeat_instance == 1),]
# Remove 1253016 psg 2, 4 and 5
sleep_study <- sleep_study[!(sleep_study$mrn == 1253016 & sleep_study$redcap_repeat_instance %in% c(2,4,5)),]
# keep 1405034 psg 2
sleep_study$sleep_include[sleep_study$mrn == 1405034 & sleep_study$redcap_repeat_instance == 2] <- "Yes"
#create a copy of sleep data to restart if needed
sleepy <- sleep_study
#remove extra rows & keep only completed info
sleep_study <- sleep_study[!is.na(sleep_study$redcap_repeat_instrument),] #sleep_study[sleep_study$redcap_repeat_instrument == 'Sleep Study',]
sleep_study <- sleep_study[sleep_study$sleep_study_complete == "Complete",]
bad_sleep <- sleep_study[sleep_study$sleep_include == "No",]
sleep_study <- sleep_study[sleep_study$sleep_include == "Yes",]
include <- sleep_study[!duplicated(sleep_study$mrn), c("mrn")]
basic_info <- basic_info[basic_info$basic_info_complete == "Complete",]
basic_info <- basic_info[(basic_info$mrn %in% include),]
#caluclate age at pump placememt
basic_info$itb_age <- (as.Date(basic_info$implant_date1, format = "%m/%d/%Y") - as.Date(basic_info$dob, format = "%m/%d/%Y"))/365
itb_pump <- itb_pump[!is.na(itb_pump$redcap_repeat_instrument),]#itb_pump[itb_pump$redcap_repeat_instrument == 'ITB Pump Placement',]
itb_pump <- itb_pump[itb_pump$itb_pump_placement_complete == "Complete",]
itb_pump <- itb_pump[(itb_pump$mrn %in% include),]
#see how many people have studies pre/post surgery
#compare
date1 <- basic_info[,c("mrn", "implant_date1", "dob")]
surg1 <- itb_pump[itb_pump$redcap_repeat_instance == 1, c("mrn", "surgery_date")]
#merge in surgery dates to sleep studies
sleep_studies <- Reduce(function(x,y) merge(x,y, by = c("mrn"), all.x = T, all.y = T),  list(sleep_study, date1, surg1))
#keep only a coupld of variables to see what is happening
#sleep_studies <- sleep_studies[,c("mrn", "redcap_repeat_instance", "psg_study_date", "study_itb_order",  "implant_date1" ,"surgery_date")]
#calculate time between study and initial implant (there are a few errors in the 'study_itb_order' variable
sleep_studies$psg_study_date <- as.Date(sleep_studies$psg_study_date, format = "%m/%d/%Y")
sleep_studies$implant_date1 <- as.Date(sleep_studies$implant_date1, format = "%m/%d/%Y")
sleep_studies$surgery_date <- as.Date(sleep_studies$surgery_date, format = "%m/%d/%Y")
sleep_studies$dob <- as.Date(sleep_studies$dob, format = "%m/%d/%Y")
sleep_studies$verify <- as.numeric(sleep_studies$implant_date1)- as.numeric(sleep_studies$surgery_date)
sleep_studies$time_between <- as.numeric(sleep_studies$psg_study_date) - as.numeric(sleep_studies$implant_date1) #, format = "%m/%d/%Y"
#caluclate age at sleep study for use in dichotomization of lab values based on age
sleep_studies$psg_age <- (sleep_studies$psg_study_date - sleep_studies$dob)/365
#create dichotomized values of periodic breathing, oahi_score, cahi, rdi ('___' included as messy way to summarize later)
sleep_studies$pb___binary <- ifelse(sleep_studies$periodic_breathing >1, 1, 0)
sleep_studies$cahi___binary <- ifelse(sleep_studies$cahi >4, 1, 0)
#ohi and rdi are dichotmized differently based on age (may potentially change age cutoff to 13 instead of 18)
sleep_studies$oahi___binary <- ifelse(sleep_studies$psg_age < 18 & sleep_studies$oahi_score >1, 1 ,
ifelse(sleep_studies$psg_age >= 18 & sleep_studies$oahi_score >= 5, 1, 0))
sleep_studies$rdi___binary <- ifelse(sleep_studies$psg_age < 18 & sleep_studies$rdi >1, 1 ,
ifelse(sleep_studies$psg_age >= 18 & sleep_studies$rdi >= 5, 1, 0))
#look at who has a before and who has an after
before <- sleep_studies[sleep_studies$time_between < 0,]
before <- before[order(before$mrn,before$psg_study_date, decreasing = T),] #keep only the most recent sleep study prior to
most_recent_pre <- before[!duplicated(before$mrn),]#22 people have a sleep study before
most_recent_pre$compare <- "most recent pre"
# most_recent_pre <- most_recent_pre[,c("mrn" , "psg_study_date", "compare")]
#calculate age at most recent pre sleep study
most_recent_pre$pre_age <- (most_recent_pre$psg_study_date - most_recent_pre$dob)/365
after <- sleep_studies[sleep_studies$time_between > 0,]
after <- after[order(after$mrn,after$psg_study_date),]
most_recent_post <- after[!duplicated(after$mrn),]#38 people have sleep studies after
most_recent_post$compare <- "most recent post"
# most_recent_post <- most_recent_pre[,c("mrn" , "psg_study_date", "compare")]
#calculate age at most recent post sleep study
most_recent_post$post_age <- (most_recent_post$psg_study_date - most_recent_post$dob)/365
#get a list of mrn's that have both a pre and post surgery study
miss <- merge(most_recent_post,most_recent_pre, by = "mrn", all=T)
useable <- merge(most_recent_post,most_recent_pre, by = "mrn", all = F)
useable$has_prepost <- 1
useable <- useable[,c("mrn", "has_prepost")]
#merge in usable to all datasets so we know who has what
itb_use <- merge(itb_pump, useable, by = 'mrn', all = F)
sleep_use <- merge(sleep_studies, useable, by = 'mrn', all = F)
sleep_use <- sleep_use[order(sleep_use$mrn,sleep_use$psg_study_date, decreasing = T),]
#stack the most recent pre and most recent post for those who have them
pre_post_all <- rbind(most_recent_pre, most_recent_post)
#keep only those who have both
pre_post_paired <- merge(pre_post_all, useable, by = 'mrn', all = T)#changed from false on 1/7 for ability to make table with all individuals
View(most_recent_pre)
View(most_recent_post)
#stack the most recent pre and most recent post for those who have them
colnames(most_recent_post) <- colnames(most_recent_pre)
pre_post_all <- rbind(most_recent_pre, most_recent_post)
#keep only those who have both
pre_post_paired <- merge(pre_post_all, useable, by = 'mrn', all = T)#changed from false on 1/7 for ability to make table with all individuals
#this didnt work but below did?
# pre_post_paired$pre_post <- ifelse(pre_post_paired$has_prepost == 1 & pre_post_paired$compare == "most recent post", "paired post",
#                                    ifelse(pre_post_paired$has_prepost == 1 & pre_post_paired$compare == "most recent pre","paired pre", pre_post_paired$compare))
pre_post_paired$pre_post <- ifelse(is.na(pre_post_paired$has_prepost), pre_post_paired$compare,
ifelse(pre_post_paired$has_prepost == 1 & pre_post_paired$compare == "most recent post", "paired post","paired pre"))
####Create Confidence intervals for Proportions & test for differences in proportions using partially paired test --- create a function###################
########create Confidence intervals for each of the groups for pre_post_paired$compare but test using the pre_post_paired$pre_post variable##################
#create a copy for changes
pre_post_test <- pre_post_paired
#variables wanted
vars_binary <- c("srbd_type___1", "srbd_type___2", "srbd_type___3",  "srbd_type___4",
"treatment___0",  "treatment___1",  "treatment___2", "treatment___3","treatment___4",
"treatment___5",    'night_symptoms___1','night_symptoms___2','night_symptoms___3',
'night_symptoms___4','night_symptoms___5',  'night_symptoms___6','night_symptoms___7',
'night_symptoms___8','night_symptoms___9','night_symptoms___10', 'night_symptoms___11',
'day_symptoms___0','day_symptoms___1','day_symptoms___2',
'day_symptoms___3','day_symptoms___4','day_symptoms___5','sleep_risks___1',
'sleep_risks___2','sleep_risks___3','sleep_risks___4','sleep_risks___5',
'sleep_risks___6','sleep_risks___7','sleep_risks___8','sleep_risks___9','sleep_risks___10', 'sleep_risks___11')
#first change back to numeric options for testing
back_numeric <- function(var){ifelse(var == "Checked", 1, 0)}
pre_post_test[vars_binary] <- apply(pre_post_test[vars_binary],2, back_numeric)
#treatment indicated binary
pre_post_test$treatment___indicated <- ifelse(pre_post_test$treatment_indicated == "Yes", 1, 0)
#count number of "Checked" Responses by category for variables of interest (select all "check all apply" variables)
#proportions <- pre_post_test %>% group_by(compare) %>% summarise_at(pre_post_test,vars(vars_binary),funs(n(), sum))
proportions <- pre_post_test %>% group_by(compare) %>% select(contains("___"))%>%summarise_all(sum, na.rm = T) #selection will need to change if additional variables created in format not like REDCap srbd_type___1
#create a function
library(DescTools)
binom_ci <- function(var, total){
x <- BinomCI(var, total, method = "wilson")
CI <- paste0(var, " (", round(x[1], 2)*100, "%) ","[", round(x[2], 2)*100, "%", ", ", round(x[3], 2)*100, "%]") #changed all rounding to 0 instead of 3
CI
}
#add all categorical variables
tab2_catvars <- c('oahi___binary', 'cahi___binary', 'rdi___binary', 'pb___binary')
vars_bin <- c(tab2_catvars,vars_binary, 'treatment___indicated')
pre <- proportions[which(proportions$compare == 'most recent pre'),]
pre_tests<-data.frame(do.call(rbind,lapply(pre[vars_bin],binom_ci,  total = 22)),row.names=NULL) #total = total number of individuals in "pre" group
pre_tests$Variable <- vars_bin#""
names(pre_tests) <- c("Pre ITB CI's", "Variable Name")
post <- proportions[which(proportions$compare == 'most recent post'),]
post_tests<-data.frame(do.call(rbind,lapply(post[vars_bin],binom_ci,  total = 39)),row.names=NULL) #total = total number of individuals in "ppst" group
# post_tests$Variable <- vars_binary#""
names(post_tests) <- c("Post ITB CI's")#, "Variable Name")
#can just cbind because all variables in same order.... (or could use merge but order messed up for copying tables easily... )
prop_cis <- cbind(pre_tests, post_tests)
library(Partiallyoverlapping)
test_prop <- function(var){
x1 <- pre_post_test[which(pre_post_test$pre_post=='most recent pre'),var]
x2 <- pre_post_test[which(pre_post_test$pre_post=='most recent post'),var]
x3a <- pre_post_test[which(pre_post_test$pre_post=='paired pre'),var]
x4a <- pre_post_test[which(pre_post_test$pre_post=='paired post'),var]
#make sure paired data is available for both pre-post
x3 <- subset(x3a, !is.na(x3a) & !is.na(x4a))
x4 <- subset(x4a, !is.na(x3a) & !is.na(x4a))
test <- Prop.test(x1, x2, x3, x4)
round(test$p.value, 2)
}
#test_prop("srbd_type___1") #example of function outside loop
prop_tests<-data.frame(do.call(rbind,lapply(vars_bin,test_prop)),row.names=NULL) #total = total number of individuals in "ppst" group
prop_tests$Variable <- vars_bin
######Test for differences in means with partially paired data-- create another function#############3
vars_continuous <- c('oahi_score', 'cahi', 'rdi', 'periodic_breathing', 'sleep_time', 'hypoxemia',"srbd_amt",  "trt_amt",    "total_night_symptoms",     "total_day_symptoms",      "total_sleep_risks")
test_means <- function(var){
x1 <- pre_post_test[which(pre_post_test$pre_post=='most recent pre'),var]
x2 <- pre_post_test[which(pre_post_test$pre_post=='most recent post'),var]
#make sure no NA's available
x1 <- subset(x1, !is.na(x1))
x2 <- subset(x2, !is.na(x2))
x3a <- pre_post_test[which(pre_post_test$pre_post=='paired pre'),var]
x4a <- pre_post_test[which(pre_post_test$pre_post=='paired post'),var]
#make sure paired data is available for both pre-post
x3 <- subset(x3a, !is.na(x3a) & !is.na(x4a))
x4 <- subset(x4a, !is.na(x3a) & !is.na(x4a))
test <- try(Partover.test(x1, x2, x3, x4))
x<- ifelse(inherits(test, "try-error"), NA, round(test$p.value, 2))
x
}
means_tests<-data.frame(do.call(rbind,lapply(vars_continuous,test_means)),row.names=NULL) #total = total number of individuals in "ppst" group
means_tests$Variable <- vars_continuous
###############################create figures of longitudinal data###############################
#make a longitudinal dataset with only dates
itb_times <- itb_pump
itb_times$date <- as.Date(itb_times$surgery_date, format = "%m/%d/%Y")
itb_times$redcap_repeat_instrument <- itb_times$surgery_reason
itb_times <- itb_times[,c('mrn', 'redcap_repeat_instrument', 'date')]
sleep_times <- sleep_study
sleep_times$psg_study_date <- as.character(sleep_times$psg_study_date)
sleep_times$date <- as.Date(sleep_times$psg_study_date, format = "%m/%d/%Y")
sleep_times$date <- as.factor(sleep_times$date)
sleep_times <- sleep_times[,c('mrn', 'redcap_repeat_instrument', 'date')]
all_times <- rbind(itb_times, sleep_times)
all_times$date <- as.Date(all_times$date)
all_times <- all_times[order(all_times$mrn,all_times$date),]
all_times <- all_times %>% group_by(mrn) %>% mutate(time = date - first(date))
all_times <- all_times[!is.na(all_times$mrn),]
followup <- all_times %>% group_by(mrn)%>%
summarise(
total_time = max(date) - min(date),
check = last(date) - first(date)
)
#followup < followup[order(followup$total_time),]
followup$mrn = factor(followup$mrn, levels=followup$mrn)
colnames(all_times)[2] <- "Visit Reason"
View(pre)
View(followup)
# Remove mrn identifiers
library(BCA)
followup$mrn = as.factor(1:53)
View(all_times)
followup <- all_times %>% group_by(mrn)%>%
summarise(
total_time = max(date) - min(date)
)
followup <- all_times %>% group_by(mrn)%>%
summarise(
total_time = last(date) - first(date)
)
followup <- all_times %>% group_by(mrn)%>%
summarise(
total_time = max(date) #  - min(date)
)
followup <- all_times %>%
group_by(mrn) %>%
summarise(
total_time = max(date, na.rm = T) # - min(date)
)
followup <- all_times %>%
group_by(mrn) %>%
summarise(
total_time = range(date, na.rm = T) # - min(date)
)
followup <- all_times %>%
group_by(mrn) %>%
summarise(
total_time = sum(time)
# total_time = max(date, na.rm = T) # - min(date)
)
all_times$mrn <- as.factor(all_times$mrn)
followup <- all_times %>%
group_by(mrn) %>%
summarise(
total_time = sum(time)
# total_time = max(date, na.rm = T) # - min(date)
)
followup <- all_times %>%
group_by(mrn) %>%
summarize(
total_time = sum(time)
# total_time = max(date, na.rm = T) # - min(date)
)
library(dplyr)
followup <- all_times %>%
group_by(mrn) %>%
summarise(
total_time = sum(time)
# total_time = max(date, na.rm = T) # - min(date)
)
#Clear existing data and graphics
rm(list=ls())
library(dplyr)
library(Hmisc)
library(tableone)
source('Z:/Shared Projects/Shared Breathing Institute Projects/2018.09.28 Mohon intrathecal baclofen pump and Sleep/Code/IntrathecalBaclofenP_R_basic_info.r')
source('Z:/Shared Projects/Shared Breathing Institute Projects/2018.09.28 Mohon intrathecal baclofen pump and Sleep/Code/IntrathecalBaclofenP_R_itb_pump.r')
source('Z:/Shared Projects/Shared Breathing Institute Projects/2018.09.28 Mohon intrathecal baclofen pump and Sleep/Code/IntrathecalBaclofenP_R_sleep_study.r')
# Exclude mrns 399292, 1086070, 1107197, 1057359, 1691128
exclude <- c(399292, 1086070, 1107197, 1057359, 1691128)
basic_info <- basic_info[!(basic_info$mrn %in% exclude),]
itb_pump <- itb_pump[!(itb_pump$mrn %in% exclude),]
sleep_study <- sleep_study[!(sleep_study$mrn %in% exclude),]
# Remove sleep studies
# Remove 1019819 first psg
sleep_study <- sleep_study[!(sleep_study$mrn == 1019819 & sleep_study$redcap_repeat_instance == 1),]
# Remove 1253016 psg 2, 4 and 5
sleep_study <- sleep_study[!(sleep_study$mrn == 1253016 & sleep_study$redcap_repeat_instance %in% c(2,4,5)),]
# keep 1405034 psg 2
sleep_study$sleep_include[sleep_study$mrn == 1405034 & sleep_study$redcap_repeat_instance == 2] <- "Yes"
#create a copy of sleep data to restart if needed
sleepy <- sleep_study
#remove extra rows & keep only completed info
sleep_study <- sleep_study[!is.na(sleep_study$redcap_repeat_instrument),] #sleep_study[sleep_study$redcap_repeat_instrument == 'Sleep Study',]
sleep_study <- sleep_study[sleep_study$sleep_study_complete == "Complete",]
bad_sleep <- sleep_study[sleep_study$sleep_include == "No",]
sleep_study <- sleep_study[sleep_study$sleep_include == "Yes",]
include <- sleep_study[!duplicated(sleep_study$mrn), c("mrn")]
basic_info <- basic_info[basic_info$basic_info_complete == "Complete",]
basic_info <- basic_info[(basic_info$mrn %in% include),]
#caluclate age at pump placememt
basic_info$itb_age <- (as.Date(basic_info$implant_date1, format = "%m/%d/%Y") - as.Date(basic_info$dob, format = "%m/%d/%Y"))/365
itb_pump <- itb_pump[!is.na(itb_pump$redcap_repeat_instrument),]#itb_pump[itb_pump$redcap_repeat_instrument == 'ITB Pump Placement',]
itb_pump <- itb_pump[itb_pump$itb_pump_placement_complete == "Complete",]
itb_pump <- itb_pump[(itb_pump$mrn %in% include),]
#see how many people have studies pre/post surgery
#compare
date1 <- basic_info[,c("mrn", "implant_date1", "dob")]
surg1 <- itb_pump[itb_pump$redcap_repeat_instance == 1, c("mrn", "surgery_date")]
#merge in surgery dates to sleep studies
sleep_studies <- Reduce(function(x,y) merge(x,y, by = c("mrn"), all.x = T, all.y = T),  list(sleep_study, date1, surg1))
#keep only a coupld of variables to see what is happening
#sleep_studies <- sleep_studies[,c("mrn", "redcap_repeat_instance", "psg_study_date", "study_itb_order",  "implant_date1" ,"surgery_date")]
#calculate time between study and initial implant (there are a few errors in the 'study_itb_order' variable
sleep_studies$psg_study_date <- as.Date(sleep_studies$psg_study_date, format = "%m/%d/%Y")
sleep_studies$implant_date1 <- as.Date(sleep_studies$implant_date1, format = "%m/%d/%Y")
sleep_studies$surgery_date <- as.Date(sleep_studies$surgery_date, format = "%m/%d/%Y")
sleep_studies$dob <- as.Date(sleep_studies$dob, format = "%m/%d/%Y")
sleep_studies$verify <- as.numeric(sleep_studies$implant_date1)- as.numeric(sleep_studies$surgery_date)
sleep_studies$time_between <- as.numeric(sleep_studies$psg_study_date) - as.numeric(sleep_studies$implant_date1) #, format = "%m/%d/%Y"
#caluclate age at sleep study for use in dichotomization of lab values based on age
sleep_studies$psg_age <- (sleep_studies$psg_study_date - sleep_studies$dob)/365
#create dichotomized values of periodic breathing, oahi_score, cahi, rdi ('___' included as messy way to summarize later)
sleep_studies$pb___binary <- ifelse(sleep_studies$periodic_breathing >1, 1, 0)
sleep_studies$cahi___binary <- ifelse(sleep_studies$cahi >4, 1, 0)
#ohi and rdi are dichotmized differently based on age (may potentially change age cutoff to 13 instead of 18)
sleep_studies$oahi___binary <- ifelse(sleep_studies$psg_age < 18 & sleep_studies$oahi_score >1, 1 ,
ifelse(sleep_studies$psg_age >= 18 & sleep_studies$oahi_score >= 5, 1, 0))
sleep_studies$rdi___binary <- ifelse(sleep_studies$psg_age < 18 & sleep_studies$rdi >1, 1 ,
ifelse(sleep_studies$psg_age >= 18 & sleep_studies$rdi >= 5, 1, 0))
#look at who has a before and who has an after
before <- sleep_studies[sleep_studies$time_between < 0,]
before <- before[order(before$mrn,before$psg_study_date, decreasing = T),] #keep only the most recent sleep study prior to
most_recent_pre <- before[!duplicated(before$mrn),]#22 people have a sleep study before
most_recent_pre$compare <- "most recent pre"
# most_recent_pre <- most_recent_pre[,c("mrn" , "psg_study_date", "compare")]
#calculate age at most recent pre sleep study
most_recent_pre$pre_age <- (most_recent_pre$psg_study_date - most_recent_pre$dob)/365
after <- sleep_studies[sleep_studies$time_between > 0,]
after <- after[order(after$mrn,after$psg_study_date),]
most_recent_post <- after[!duplicated(after$mrn),]#38 people have sleep studies after
most_recent_post$compare <- "most recent post"
# most_recent_post <- most_recent_pre[,c("mrn" , "psg_study_date", "compare")]
#calculate age at most recent post sleep study
most_recent_post$post_age <- (most_recent_post$psg_study_date - most_recent_post$dob)/365
#get a list of mrn's that have both a pre and post surgery study
miss <- merge(most_recent_post,most_recent_pre, by = "mrn", all=T)
useable <- merge(most_recent_post,most_recent_pre, by = "mrn", all = F)
useable$has_prepost <- 1
useable <- useable[,c("mrn", "has_prepost")]
#merge in usable to all datasets so we know who has what
itb_use <- merge(itb_pump, useable, by = 'mrn', all = F)
sleep_use <- merge(sleep_studies, useable, by = 'mrn', all = F)
sleep_use <- sleep_use[order(sleep_use$mrn,sleep_use$psg_study_date, decreasing = T),]
#stack the most recent pre and most recent post for those who have them
colnames(most_recent_post) <- colnames(most_recent_pre)
pre_post_all <- rbind(most_recent_pre, most_recent_post)
#keep only those who have both
pre_post_paired <- merge(pre_post_all, useable, by = 'mrn', all = T)#changed from false on 1/7 for ability to make table with all individuals
#this didnt work but below did?
# pre_post_paired$pre_post <- ifelse(pre_post_paired$has_prepost == 1 & pre_post_paired$compare == "most recent post", "paired post",
#                                    ifelse(pre_post_paired$has_prepost == 1 & pre_post_paired$compare == "most recent pre","paired pre", pre_post_paired$compare))
pre_post_paired$pre_post <- ifelse(is.na(pre_post_paired$has_prepost), pre_post_paired$compare,
ifelse(pre_post_paired$has_prepost == 1 & pre_post_paired$compare == "most recent post", "paired post","paired pre"))
####Create Confidence intervals for Proportions & test for differences in proportions using partially paired test --- create a function###################
########create Confidence intervals for each of the groups for pre_post_paired$compare but test using the pre_post_paired$pre_post variable##################
#create a copy for changes
pre_post_test <- pre_post_paired
#variables wanted
vars_binary <- c("srbd_type___1", "srbd_type___2", "srbd_type___3",  "srbd_type___4",
"treatment___0",  "treatment___1",  "treatment___2", "treatment___3","treatment___4",
"treatment___5",    'night_symptoms___1','night_symptoms___2','night_symptoms___3',
'night_symptoms___4','night_symptoms___5',  'night_symptoms___6','night_symptoms___7',
'night_symptoms___8','night_symptoms___9','night_symptoms___10', 'night_symptoms___11',
'day_symptoms___0','day_symptoms___1','day_symptoms___2',
'day_symptoms___3','day_symptoms___4','day_symptoms___5','sleep_risks___1',
'sleep_risks___2','sleep_risks___3','sleep_risks___4','sleep_risks___5',
'sleep_risks___6','sleep_risks___7','sleep_risks___8','sleep_risks___9','sleep_risks___10', 'sleep_risks___11')
#first change back to numeric options for testing
back_numeric <- function(var){ifelse(var == "Checked", 1, 0)}
pre_post_test[vars_binary] <- apply(pre_post_test[vars_binary],2, back_numeric)
#treatment indicated binary
pre_post_test$treatment___indicated <- ifelse(pre_post_test$treatment_indicated == "Yes", 1, 0)
#count number of "Checked" Responses by category for variables of interest (select all "check all apply" variables)
#proportions <- pre_post_test %>% group_by(compare) %>% summarise_at(pre_post_test,vars(vars_binary),funs(n(), sum))
proportions <- pre_post_test %>% group_by(compare) %>% select(contains("___"))%>%summarise_all(sum, na.rm = T) #selection will need to change if additional variables created in format not like REDCap srbd_type___1
#create a function
library(DescTools)
binom_ci <- function(var, total){
x <- BinomCI(var, total, method = "wilson")
CI <- paste0(var, " (", round(x[1], 2)*100, "%) ","[", round(x[2], 2)*100, "%", ", ", round(x[3], 2)*100, "%]") #changed all rounding to 0 instead of 3
CI
}
#add all categorical variables
tab2_catvars <- c('oahi___binary', 'cahi___binary', 'rdi___binary', 'pb___binary')
vars_bin <- c(tab2_catvars,vars_binary, 'treatment___indicated')
pre <- proportions[which(proportions$compare == 'most recent pre'),]
pre_tests<-data.frame(do.call(rbind,lapply(pre[vars_bin],binom_ci,  total = 22)),row.names=NULL) #total = total number of individuals in "pre" group
pre_tests$Variable <- vars_bin#""
names(pre_tests) <- c("Pre ITB CI's", "Variable Name")
post <- proportions[which(proportions$compare == 'most recent post'),]
post_tests<-data.frame(do.call(rbind,lapply(post[vars_bin],binom_ci,  total = 39)),row.names=NULL) #total = total number of individuals in "ppst" group
# post_tests$Variable <- vars_binary#""
names(post_tests) <- c("Post ITB CI's")#, "Variable Name")
#can just cbind because all variables in same order.... (or could use merge but order messed up for copying tables easily... )
prop_cis <- cbind(pre_tests, post_tests)
library(Partiallyoverlapping)
test_prop <- function(var){
x1 <- pre_post_test[which(pre_post_test$pre_post=='most recent pre'),var]
x2 <- pre_post_test[which(pre_post_test$pre_post=='most recent post'),var]
x3a <- pre_post_test[which(pre_post_test$pre_post=='paired pre'),var]
x4a <- pre_post_test[which(pre_post_test$pre_post=='paired post'),var]
#make sure paired data is available for both pre-post
x3 <- subset(x3a, !is.na(x3a) & !is.na(x4a))
x4 <- subset(x4a, !is.na(x3a) & !is.na(x4a))
test <- Prop.test(x1, x2, x3, x4)
round(test$p.value, 2)
}
#test_prop("srbd_type___1") #example of function outside loop
prop_tests<-data.frame(do.call(rbind,lapply(vars_bin,test_prop)),row.names=NULL) #total = total number of individuals in "ppst" group
prop_tests$Variable <- vars_bin
######Test for differences in means with partially paired data-- create another function#############3
vars_continuous <- c('oahi_score', 'cahi', 'rdi', 'periodic_breathing', 'sleep_time', 'hypoxemia',"srbd_amt",  "trt_amt",    "total_night_symptoms",     "total_day_symptoms",      "total_sleep_risks")
test_means <- function(var){
x1 <- pre_post_test[which(pre_post_test$pre_post=='most recent pre'),var]
x2 <- pre_post_test[which(pre_post_test$pre_post=='most recent post'),var]
#make sure no NA's available
x1 <- subset(x1, !is.na(x1))
x2 <- subset(x2, !is.na(x2))
x3a <- pre_post_test[which(pre_post_test$pre_post=='paired pre'),var]
x4a <- pre_post_test[which(pre_post_test$pre_post=='paired post'),var]
#make sure paired data is available for both pre-post
x3 <- subset(x3a, !is.na(x3a) & !is.na(x4a))
x4 <- subset(x4a, !is.na(x3a) & !is.na(x4a))
test <- try(Partover.test(x1, x2, x3, x4))
x<- ifelse(inherits(test, "try-error"), NA, round(test$p.value, 2))
x
}
means_tests<-data.frame(do.call(rbind,lapply(vars_continuous,test_means)),row.names=NULL) #total = total number of individuals in "ppst" group
means_tests$Variable <- vars_continuous
###############################create figures of longitudinal data###############################
#make a longitudinal dataset with only dates
itb_times <- itb_pump
itb_times$date <- as.Date(itb_times$surgery_date, format = "%m/%d/%Y")
itb_times$redcap_repeat_instrument <- itb_times$surgery_reason
itb_times <- itb_times[,c('mrn', 'redcap_repeat_instrument', 'date')]
sleep_times <- sleep_study
sleep_times$psg_study_date <- as.character(sleep_times$psg_study_date)
sleep_times$date <- as.Date(sleep_times$psg_study_date, format = "%m/%d/%Y")
sleep_times$date <- as.factor(sleep_times$date)
sleep_times <- sleep_times[,c('mrn', 'redcap_repeat_instrument', 'date')]
all_times <- rbind(itb_times, sleep_times)
all_times$date <- as.Date(all_times$date)
all_times <- all_times[order(all_times$mrn,all_times$date),]
all_times <- all_times %>% group_by(mrn) %>% mutate(time = date - first(date))
all_times <- all_times[!is.na(all_times$mrn),]
all_times$mrn <- as.factor(all_times$mrn)
followup <- all_times %>%
group_by(mrn) %>%
summarise(
total_time = sum(time)
# total_time = max(date, na.rm = T) # - min(date)
)
followup <- all_times %>%
group_by(mrn) %>%
summarise(
total_time = sum(time, na.rm = T)
# total_time = max(date, na.rm = T) # - min(date)
)
followup <- all_times %>%
group_by(mrn) %>%
summarize(n = n())
followup <- all_times %>%
group_by(mrn) %>%
summarise(n = n())
