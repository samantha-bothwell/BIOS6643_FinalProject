install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='sjbothwell',
token='C8417462BA59FEDDD3B801DF4FB2AB30',
secret='UXIR2ow9Hyu3eBnX7LM8cL3iIB54vDuoKY3Suic1')
rsconnect::deployApp("Z:\Shared Projects\Shared Breathing Institute Projects\2020.09.21 Anderson Propeller Health Adherence Trajectories\Seasonal_Asthma\app.R")
rsconnect::deployApp("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Seasonal_Asthma/app.R")
rsconnect::deployApp("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Seasonal_Asthma")
rsconnect::deployApp("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Seasonal_Asthma")
shiny::runApp('Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Seasonal_Asthma')
rsconnect::deployApp("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Seasonal_Asthma")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
#### Plot data x-axis: study_days, y-axis: wt_lb, group by: participant_id
library(ggplot2)
library(gridExtra)
g1 <- ggplot(data = wt, aes(x = study_days, y = wt_lb, group = participant_id, color = as.factor(cohort))) +
geom_line()
#### Plot data x-axis: weight_dates, y-axis: wt_lb, group by: participant_id
g2 <- ggplot(data = wt, aes(x = as.Date(weight_dates), y = wt_lb, group = participant_id, color = as.factor(cohort))) +
geom_line()
grid.arrange(g1, g2, ncol = 1)
# Get last measurement
library(dplyr)
dem <- wt %>%
group_by(participant_id) %>%
arrange(study_days) %>%
summarize(`Total Measures` = n(), `Time Span` = max(study_days, na.rm = T), Cohort = cohort,
`Baseline Weight` = first(na.omit(wt_lb)), Age = age, Sex = sex, Race = race, Ethnicity = ethnicity,
`Marital Status` = marital_status) %>%
slice(1)
# Relevel factors
dem$Sex <- as.factor(dem$Sex); dem$Race <- as.factor(dem$Race)
dem$Sex <- recode_factor(dem$Sex, "0" = "Female", "1" = "Male")
dem$Ethnicity <- as.factor(dem$Ethnicity); dem$`Marital Status` <- as.factor(dem$`Marital Status`)
dem$Race <- recode_factor(dem$Race, "1" = "American Indian or Alaska Native", "2" = "Asian", "3" = "Black",
"4" = "Native Hawaiian or other Pacific Islander", "5" = "White", "6" = "Not Reported", "7" = "Other")
dem$Ethnicity <- recode_factor(dem$Ethnicity, "1" = "Hispanic or Latino", "2" = "Non Hispanic or Latino",
"3" = "Other")
dem$`Marital Status` <- recode_factor(dem$`Marital Status`, "1" = "Single", "2" = "Committed Relationship",
"3" = "Married", "4" = "Separated", "5" = "Divorced", "6" = "Widowed", "7" = "Not Reported")
# table 1 by cohort
library(table1)
# Format table
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Mean (95% CI)"=sprintf("%s (%s, %s)",
MEAN, round(quantile(x, 0.025),2), round(quantile(x, 0.975),2))))
}
# make table
tb1 <- table1(~ `Age` + `Sex` + `Race` + `Ethnicity` + `Marital Status` +
`Total Measures` + `Baseline Weight`|`Cohort`,
data = dem, render.continuous = my.render.cont) # , droplevels=F)
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Mean (95% CI)"=sprintf("%s (%s, %s)",
MEAN, round(quantile(x, 0.025, na.rm = T),2), round(quantile(x, 0.975, na.rm = T),2))))
# Format table
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Mean (95% CI)"=sprintf("%s (%s, %s)",
MEAN, round(quantile(x, 0.025, na.rm = T),2), round(quantile(x, 0.975, na.rm = T),2))))
}
# make table
tb1 <- table1(~ `Age` + `Sex` + `Race` + `Ethnicity` + `Marital Status` +
`Total Measures` + `Baseline Weight`|`Cohort`,
data = dem, render.continuous = my.render.cont) # , droplevels=F)
dem$Cohort <- as.factor(dem$Cohort)
# make table
tb1 <- table1(~ `Age` + `Sex` + `Race` + `Ethnicity` + `Marital Status` +
`Total Measures` + `Baseline Weight`|`Cohort`,
data = dem, render.continuous = my.render.cont) # , droplevels=F)
### Read in data
traj <- readRDS("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Data/ctrl_traj.rds")
View(traj)
### Remove days that create big gaps
traj <- traj[-665,]
### Summarize
traj.sum <- traj %>%
group_by(uid) %>%
summarise(Day.min = min(as.Date(Day)), Day.max = max(as.Date(Day)),
Day.span = Day.max - Day.min, Total.records = length(unique(Day)))
View(traj.sum)
traj.sum$uid <- as.numeric(traj.sum$uid)
### Summarize
traj.sum <- traj %>%
group_by(uid) %>%
summarise(Day.min = min(as.Date(Day)), Day.max = max(as.Date(Day)),
Day.span = Day.max - Day.min, Total.records = length(unique(Day)))
83/51
51/83
145/178
69/200
95/199
24/25
23/28
10/62
197/205
42/173
196/210
180/229
122/241
205/277
177/279
289/292
16/34
168/293
172/258
### Read in data
traj <- readRDS("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Data/ctrl_traj.rds")
### Remove days that create big gaps
traj <- traj[-665,] # uid 15 went from day 26 to day 90 - removed day 90
traj <- traj[-1254,] # uid 3 went from day 15 to day 35 - removed day 35
traj <- traj[-410,] # uid 11 went from day 44 to day 174 - removed day 174
traj <- traj[-608,] # uid 13 went from day 1 to day 47 - removed day 1
### Summarize
traj.sum <- traj %>%
group_by(uid) %>%
summarise(Day.min = min(as.Date(Day)), Day.max = max(as.Date(Day)),
Day.span = Day.max - Day.min, Total.records = length(unique(Day)))
14/15
41/53
difftime("2020-04-06", "2020-04-21")
### Read in data
traj <- readRDS("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Data/ctrl_traj.rds")
### Remove days that create big gaps
traj <- traj[-665,] # uid 15 went from day 26 to day 90 - removed day 90
traj <- traj[-1254,] # uid 3 went from day 15 to day 35 - removed day 35
traj <- traj[-410,] # uid 11 went from day 44 to day 174 - removed day 174
### Read in data
traj <- readRDS("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Data/ctrl_traj.rds")
### Remove days that create big gaps
traj <- traj[-665,] # uid 15 went from day 26 to day 90 - removed day 90
traj <- traj[-1254,] # uid 3 went from day 15 to day 35 - removed day 35
9/15
### Summarize
traj.sum <- traj %>%
group_by(uid) %>%
summarise(Day.min = min(as.Date(Day)), Day.max = max(as.Date(Day)),
Day.span = Day.max - Day.min, Total.records = length(unique(Day)), avg = mean(Adherence)))
### Summarize
traj.sum <- traj %>%
group_by(uid) %>%
summarise(Day.min = min(as.Date(Day)), Day.max = max(as.Date(Day)),
Day.span = Day.max - Day.min, Total.records = length(unique(Day), avg = mean(Adherence)))
### Summarize
traj.sum <- traj %>%
group_by(uid) %>%
summarise(Day.min = min(as.Date(Day)), Day.max = max(as.Date(Day)),
Day.span = Day.max - Day.min, Total.records = length(unique(Day), avg = mean(Adherence, na.rm = T)))
### Summarize
traj.sum <- traj %>%
group_by(uid) %>%
summarise(Day.min = min(as.Date(Day)), Day.max = max(as.Date(Day)),
Day.span = Day.max - Day.min, Total.records = length(unique(Day)), avg = mean(Adherence, na.rm = T))
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
View(wt)
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,12,55:57)]
View(wt)
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,12,14,55:57)]
# Add missing data
wt <- wt %>%
group_by(participnat_id) %>%
mutate(Day = as.Date(weight_dates)) %>%
complete(Day = seq.Date(min(Day), max(Day), by="day"))
# Add missing data
library(dplyr)
wt <- wt %>%
group_by(participnat_id) %>%
mutate(Day = as.Date(weight_dates)) %>%
complete(Day = seq.Date(min(Day), max(Day), by="day"))
wt <- wt %>%
group_by(participnat_id) %>%
mutate(Day = as.Date(weight_dates)) %>%
complete(Day = seq.Date(min(Day), max(Day), by="day"))
wt <- wt %>%
group_by(participnat_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates), max(weight_dates), by="day"))
#### Load in the data
season <- read.csv("Z:/Shared Projects/Shared Breathing Institute Projects/2020.09.21 Anderson Propeller Health Adherence Trajectories/Data/DataProcessed/season.csv")
season <- season[,-1]
colnames(season) <- c('uid', 'Day', 'Cont_med', 'Cont_ad')
View(season)
### Add missing days
season <- season %>%
group_by(uid) %>%
mutate(Day = as.Date(Day)) %>%
complete(Day = seq.Date(min(Day), max(Day), by="day"))
# Add missing data
library(dplyr)
library(stringr)
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
wt <- wt %>%
group_by(participnat_id) %>%
mutate(Day = as.Date(weight_dates)) %>%
complete(Day = seq.Date(min(Day), max(Day), by="day"))
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,12,14,55:57)]
wt <- wt %>%
group_by(participnat_id) %>%
mutate(Day = as.Date(study_days)) %>%
complete(Day = seq.Date(min(Day), max(Day), by="day"))
wt <- wt %>%
group_by(participant_id) %>%
mutate(Day = as.Date(weight_dates)) %>%
complete(Day = seq.Date(min(Day), max(Day), by="day"))
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates),
max(weight_dates), by="day", na.rm = T))
library(stringr)
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates),
max(weight_dates), by="day", na.rm = T))
library(tidyr)
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates),
max(weight_dates), by="day", na.rm = T))
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates),
max(weight_dates), by="day"))
max(as.Date(wt$weight_dates))
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates, na.rm = T),
max(weight_dates, na.rm = T), by="day"))
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,12,14,55:57)]
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates), Day1 = min(as.Date(weight_dates))) %>%
complete(weight_dates = seq.Date(min(weight_dates, na.rm = T),
max(weight_dates, na.rm = T), by="day"))
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates), Day1 = min(as.Date(weight_dates), na.rm = T)) %>%
complete(weight_dates = seq.Date(min(weight_dates, na.rm = T),
max(weight_dates, na.rm = T), by="day"))
wt$weight_dates - wt$Day1
wt$study_days <- wt$weight_dates - wt$Day1 + 1
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,12,14,55:57)]
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates), Day1 = min(as.Date(weight_dates), na.rm = T),
cohort = min(cohort, na.rm = T)) %>%
complete(weight_dates = seq.Date(min(weight_dates, na.rm = T),
max(weight_dates, na.rm = T), by="day"))
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,12,14,55:57)]
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates), Day1 = min(as.Date(weight_dates), na.rm = T)) %>%
complete(weight_dates = seq.Date(min(weight_dates, na.rm = T),
max(weight_dates, na.rm = T), by="day")) %>%
mutate(cohort = min(cohort, na.rm = T), sex = min(sex, na.rm = T), race = min(race, na.rm = T))
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,12,14,55:57)]
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates, na.rm = T),
max(weight_dates, na.rm = T), by="day")) %>%
mutate(cohort = min(cohort, na.rm = T), sex = min(sex, na.rm = T), race = min(race, na.rm = T),
Day1 = min(as.Date(weight_dates), na.rm = T))
wt$study_days <- wt$weight_dates - wt$Day1 + 1
library(stringr)
# Add season variable
wt$month <- str_split_fixed(wt$weight_dates, "-", 3)[,2]
wt$month <- as.numeric(wt$month)
wt$season <- ifelse(wt$month %in% c(12, 1, 2), "Winter",
ifelse(wt$month %in% c(3, 4, 5), "Spring",
ifelse(wt$month %in% c(6, 7, 8), "Summer", "Autumn")))
write.csv(wt, "D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_clean.csv")
write.csv(wt, "D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_clean.csv")
#### Load in the data
wt <- read.csv("D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_with_confounding.csv")
#### Clean data
# Keep only important variables
wt <- wt[,c(3,4,10,13,14,55:57)]
# Add missing data
library(dplyr)
library(tidyr)
library(stringr)
wt <- wt %>%
group_by(participant_id) %>%
mutate(weight_dates = as.Date(weight_dates)) %>%
complete(weight_dates = seq.Date(min(weight_dates, na.rm = T),
max(weight_dates, na.rm = T), by="day")) %>%
mutate(cohort = min(cohort, na.rm = T), sex = min(sex, na.rm = T), race = min(race, na.rm = T),
Day1 = min(as.Date(weight_dates), na.rm = T))
wt$study_days <- wt$weight_dates - wt$Day1 + 1
# Add season variable
wt$month <- str_split_fixed(wt$weight_dates, "-", 3)[,2]
wt$month <- as.numeric(wt$month)
wt$season <- ifelse(wt$month %in% c(12, 1, 2), "Winter",
ifelse(wt$month %in% c(3, 4, 5), "Spring",
ifelse(wt$month %in% c(6, 7, 8), "Summer", "Autumn")))
write.csv(wt, "D:/CU/Fall 2020/BIOS 6643/Project/BIOS6643_FinalProject/DataProcessed/daily_weights_clean.csv")
library(survival)
data("ovarian")
km_fit <- survfit(Surv(futime, fustat) ~ 1, data=ovarian[ovarian$rx == 1, ])
summary(ovarian$futime)
summary(km_fit)
summary(km_fit, times = c(100, 200, 300, 400, 500, 600, 700))
library(ggplot2)
library(ggplot2)
library(survminer)
library(gtsummary)
ggsurvplot(
fit = survfit(Surv(futime, fustat) ~ rx, data = ovarian),
xlab = "Days",
ylab = "Overall Probability of Survival",
#  ylim = c(0.95, 1),
#  xlim = c(0, 3650),
conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata")
survdiff(Surv(futime, fustat) ~ rx, data=ovarian)
ggsurvplot(
fit = survfit(Surv(futime, fustat) ~ rx, data = ovarian),
xlab = "Days",
ylab = "Overall Probability of Survival",
pval = T,
#  ylim = c(0.95, 1),
#  xlim = c(0, 3650),
conf.int = TRUE,
risk.table = TRUE,
risk.table.col = "strata")
View(ovarian)
# Format table
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Median (25%, 75%)"=sprintf("%s (%s, %s)",
MEDIAN, round(summary(x)[2],2), round(summary(x)[5],2))))
}
tb1 <- table1(~ `futime` + `fustat` + `age` +
`resid.ds` + `ecog.ps`|`rx`,
data = ovarian, render.continuous = my.render.cont, droplevels=F)
library(table1)
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Median (25%, 75%)"=sprintf("%s (%s, %s)",
MEDIAN, round(summary(x)[2],2), round(summary(x)[5],2))))
}
tb1 <- table1(~ `futime` + `fustat` + `age` +
`resid.ds` + `ecog.ps`|`rx`,
data = ovarian, render.continuous = my.render.cont, droplevels=F)
ovarian$resid.ds <- as.factor(ovarian$resid.ds)
ovarian$ecog.ps <- as.factor(ovarian$ecog.ps)
tb1 <- table1(~ `futime` + `fustat` + `age` +
`resid.ds` + `ecog.ps`|`rx`,
data = ovarian, render.continuous = my.render.cont, droplevels=F)
ovarian$rx <- as.factor(ovarian$rx)
tb1 <- table1(~ `futime` + `fustat` + `age` +
`resid.ds` + `ecog.ps`|`rx`,
data = ovarian, render.continuous = my.render.cont, droplevels=F)
tb1
ovarian$fustat <- as.factor(ovarian$fustat)
tb1 <- table1(~ `futime` + `fustat` + `age` +
`resid.ds` + `ecog.ps`|`rx`,
data = ovarian, render.continuous = my.render.cont, droplevels=F)
tb1
# read in data
yr10 <- read.csv("D:/CU/Fall 2020/BIOS 6624/Repositories/bios6624-sjbothwell/Project3/DataProcessed/Year10.csv"); yr10 <- yr10[,-1]
View(yr10)
miss <- yr10[is.na(yr10$SYSBP),]
miss <- yr10[is.na(yr10$SYSBP) == TRUE,]
View(yr10)
miss <- yr10[is.na(yr10$BPMEDS),]
View(miss)
# read in data
yr10 <- read.csv("D:/CU/Fall 2020/BIOS 6624/Repositories/bios6624-sjbothwell/Project3/DataProcessed/Year10.csv"); yr10 <- yr10[,-1]
View(yr10)
### Load in data
cinci.full <- read.csv("Z:/Shared Projects/Brinton/2020.09.29 Stenson - Fluid type and Hyperchloremia/Data/cincinnati_full_data_2019-10-08_1228.csv")
cinci.long <- read.csv("Z:/Shared Projects/Brinton/2020.09.29 Stenson - Fluid type and Hyperchloremia/Data/Cinci_Long.csv"); cinci.long <- cinci.long[,-1]
chco.full <- read.csv("Z:/Shared Projects/Brinton/2020.09.29 Stenson - Fluid type and Hyperchloremia/Data/Demographics.csv"); chco.full <- chco.full[,-1]
chco.long <- read.csv("Z:/Shared Projects/Brinton/2020.09.29 Stenson - Fluid type and Hyperchloremia/Data/Full_Fluid.csv"); chco.long <- chco.long[,-1]
### Packages
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
### Data clearning - remove values less than 0
chco.long <- chco.long[chco.long$fluidamt > 0,]
# change <0.14 to 0.14
cinci.long$Creatinine[c(186, 364, 538, 1791, 2020)] <- "0.14"
# cinci.long$Creatinine <- droplevels(cinci.long$Creatinine)
# remove NA columns for fluid for the sake of categories
cinci.long <- cinci.long[!(is.na(cinci.long$FluidAmt)), ]
### Change Maintenance type for cinci
cinci.long$FluidType <- as.factor(cinci.long$FluidType)
cinci.long$FluidType <- revalue(cinci.long$FluidType, c("1" = "NS", "2" = "LR", "3" = "Plasmalyte", "4" = "5% Albumin",
"5" = "1/2 NS", "6" = "1/2 NS + 20 KCl")) # There are more but these are the most important for reclassification
### Modify Categories
cinci.long$category <- ifelse(cinci.long$FluidType %in% c("NS", "NS + 20 KCl"), "NS",
ifelse(cinci.long$FluidType %in% c("LR", "Plasmalyte"), "LR", "Other"))
### Cinci Majority
# NS majority
maj.NS <- cinci.long %>%
group_by(record_id, category) %>%
summarise(amount = sum(FluidAmt)) %>%
group_by(record_id) %>%
summarise(category = category, amount = amount, sum = sum(amount), prop = amount/sum) %>%
filter(prop >= 2/3, category %in% c("NS"))
View(cinci.long)
